//
//  Commodity.swift
//  Pathfinder
//
//  Created by Adam Michael on 10/15/15.
//  Copyright Â© 2015 Pathfinder. All rights reserved.
//

import Foundation
import CoreLocation

/**
A commodity that has requested transportation via your application.

This class should never be instantiated directly because it represents the state of the data from the Pathfinder backend. Instead, request commodity transportation via the helper method in the Pathfinder class.

```
let clusterToRouteIn = self.cluster
let start = CLLocationCoordinate2D(latitude: startLat, longitude: startLng)
let end = CLLocationCoordinate2D(latitude: endLat, longitude: endLng)
let parameters = [String:Int]()
parameters["people"] = 2
parameters["sheep"] = 0
pathfinder.requestCommodityTransit(cluster: clusterToRouteIn, start: start, destination: end, parameters: parameters) { (c:Commodity) -> Void in
  c.delegate = self
  self.drawCommodityOnMap(c)
}
```

The primary purpose of creating a commodity is to set its delegate. The delegate will receive updates on the status of the commodity as defined in `CommodityDelegate`.
*/
public class Commodity {

  /// The delegate that will receive notifications when any aspect of the commodity is updated.
  public var delegate: CommodityDelegate?

  /// The unique id of the vehicle, as generated by Pathfinder.
  public var id: Int?

  /// The starting location of the commodity's journey.
  public let start: CLLocationCoordinate2D

  /// The destination location of the commodity's journey.
  public let destination: CLLocationCoordinate2D

  /// The parameters that constrain the number of commodities that can be transported by one vehicle.
  public let parameters: [String:Int]

  /// The route that is assigned to pick up the commodity, if there is one.
  public var route: Route?

  var cluster: Cluster?

  init(id: Int, start: CLLocationCoordinate2D, destination: CLLocationCoordinate2D, parameters: [String:Int]) {
    self.id = id
    self.start = start
    self.destination = destination
    self.parameters = parameters
  }

  init(cluster: Cluster, start: CLLocationCoordinate2D, destination: CLLocationCoordinate2D, parameters: [String:Int]) {
    self.cluster = cluster
    self.start = start
    self.destination = destination
    self.parameters = parameters
  }

  init(cluster: Cluster, id: Int, start: CLLocationCoordinate2D, destination: CLLocationCoordinate2D, parameters: [String:Int]) {
    self.cluster = cluster
    self.id = id
    self.start = start
    self.destination = destination
    self.parameters = parameters
  }

  init(clusterId: Int, id: Int, start: CLLocationCoordinate2D, destination: CLLocationCoordinate2D, parameters: [String:Int]) {
    self.id = id
    self.start = start
    self.destination = destination
    self.parameters = parameters
  }

  public func connect() {
    if cluster != nil {
      cluster!.connect() { (cluster: Cluster) -> Void in

      }
    }
  }

  /**
  Cancels the commodity request. The vehicle on route to pickup the commodity will be notified that the request was cancelled.
  
  - Parameter callback:  This function will be called once Pathfinder has verified that the commodity transit request was successfully cancelled.
  */
  public func cancel(callback: (success: Bool) -> Void) {

  }

  class func parse(message: NSDictionary) -> Commodity? {
    if let startLat = message["startLatitude"] as? Double {
      if let startLng = message["startLongitude"] as? Double {
        if let endLat = message["endLatitude"] as? Double {
          if let endLng = message["endLongitude"] as? Double {
            if let id = message["id"] as? Int {
              if let param = message["param"] as? Int {
                let start = CLLocationCoordinate2D(latitude: startLat, longitude: startLng)
                let end = CLLocationCoordinate2D(latitude: endLat, longitude: endLng)
                let parameters = ["chimney":param]
                return Commodity(id: id, start: start, destination: end, parameters: parameters)
              }
            }
          }
        }
      }
    }
    return nil
  }
}

class CommodityResponse {
  let id: Int
  let start: CLLocationCoordinate2D
  let destination: CLLocationCoordinate2D
  let param: Int

  class func parse(message: NSDictionary) -> CommodityResponse? {
    if let content = message["created"] as? NSDictionary {
      return parseContent(content)
    } else if let content = message["updated"] as? NSDictionary {
      return parseContent(content)
    } else if let content = message["model"] as? NSDictionary {
      return parseContent(content)
    }
    return nil
  }

  private class func parseContent(content: NSDictionary) -> CommodityResponse? {
    if content["model"] as? String == "Commodity" {
      if let value = content["value"] as? NSDictionary {
        let id = value["id"] as! Int
        let startLat = value["startLatitude"] as! Double
        let startLng = value["startLongitude"] as! Double
        let endLat = value["endLatitude"] as! Double
        let endLng = value["endLongitude"] as! Double
        let param = value["param"] as! Int
        return CommodityResponse(id: id, start: CLLocationCoordinate2D(latitude: startLat, longitude: startLng), destination: CLLocationCoordinate2D(latitude: endLat, longitude: endLng), param: param)
      }
    }
    return nil
  }

  init(id: Int, start: CLLocationCoordinate2D, destination: CLLocationCoordinate2D, param: Int) {
    self.id = id
    self.start = start
    self.destination = destination
    self.param = param
  }
}