//
//  Cluster.swift
//  Pathfinder
//
//  Created by Adam Michael on 10/15/15.
//  Copyright Â© 2015 Pathfinder. All rights reserved.
//

import Foundation
import CoreLocation

/**
A container in which vehicles are routed to transport commodities. Every registered Pathfinder application is created one default cluster. Additional sub-clusters can be created by the developer through the Pathfinder web interface.

This class should not be instantiated directly since it represents the state of the Pathfinder backend service. Instead, use the factory methods in the Pathfinder class. The typical use case of creating a Cluster object is to set a delegate for it which will receive all of the updates defined in `ClusterDelegate`.
*/
public class Cluster {

  /// The delegate that will receive notifications when any aspect of the cluster is updated.
  public var delegate: ClusterDelegate?

  /// The unique id of the cluster, as generated by Pathfinder.
  public var id: Int?

  /// The vehicles that are currently online within the cluster.
  public var vehicles: [Vehicle]

  /// The commodities that are currently waiting on transit or are in transit within the cluster.
  public var commodities: [Commodity]

  /// All of the routes that are currently in progress for the cluster.
  public let routes: [Route]

  let conn: PathfinderConnection

  init(conn: PathfinderConnection) {
    self.vehicles = [Vehicle]()
    self.commodities = [Commodity]()
    self.routes = [Route]()
    self.conn = conn
  }

  init(conn: PathfinderConnection, id: Int) {
    self.id = id
    self.vehicles = [Vehicle]()
    self.commodities = [Commodity]()
    self.routes = [Route]()
    self.conn = conn
  }

  //// Attempts to authenticate and retrieve a reference to the requested cluster. If the connection succeeds, the corresponding method on the delegate will be executed. This method should only be utilized if you wish to receive updates on all commodities, vehicles and routes for the entire cluster.
  public func connect() {
    if id != nil {
      self.conn.getClusterById(id!) { (resp: ClusterResponse) -> Void in
        self.id = resp.id
        self.vehicles = resp.vehicles
        self.commodities = resp.commodities
        self.delegate?.connectedTo(self)
      }
    } else {
      self.conn.getDefaultCluster { (appResp: ApplicationResponse) -> Void in
        self.conn.getClusterById(appResp.defaultId) { (resp: ClusterResponse) -> Void in
          self.id = resp.id
          self.vehicles = resp.vehicles
          self.commodities = resp.commodities
          self.delegate?.connectedTo(self)
        }
      }
    }
  }

  /**
  Registers the current device as a vehicle with the Pathfinder service or uses the user's authentication to determine if an existing vehicle record exists and retrieves it. This will NOT set the vehicle to the online state. No routes will be generated for the vehicle until it is set to online. If the connection is authenticated and succeeds, the corresponding method on the delegate will be executed.

  - Parameter capacities:  The limiting constraints of the vehicle of the parameters of your application's routing calculations. The set of parameters needs to be defined and prioritized via the Pathfinder web interface in advance. All vehicles will be routed while keeping their sum occupant parameters to be less than or equal to their limiting constraints.
  - Parameter callback:    This function will be called exactly once with the registered Vehicle object. The Vehicle object can be used to set the vehicle as online or offline, to receive route assignments and send updates regarding pickups and dropoffs.
  */
  public func connectAsVehicle(parameterCapacities: [String:Int]) -> Vehicle {
    return Vehicle(capacities: parameterCapacities)
  }

  /**
   Requests transportation for a physical entity from one geographical location to another. This will immediately route a vehicle to pick up the commodity if one is available that can hold the commodities parameters within the vehicles capacity. If the connection is authenticated and succeeds, the corresponding method on the delegate of the returned commodity will be executed.

   - Parameter start:        The starting location of the commodity.
   - Parameter destination:  The destination location of the commodity.
   - Parameter parameters:   The quantities the parameters of your application's routing calculations. The set of parameters needs to be defined and prioritized via the Pathfinder web interface in advance.
   - Parameter callback:    This function will be called exactly once with the created Commodity object. The Commodity object can be used to receive updates on status, routes and cancel the request if needed.
   */
  public func requestCommodity(start: CLLocationCoordinate2D, destination: CLLocationCoordinate2D, parameters: [String:Int]) -> Commodity {
    return Commodity(start: start, destination: destination, parameters: parameters)
  }
}

class ApplicationResponse {
  let defaultId: Int
  let clusterIds: [Int]

  class func parse(message: NSDictionary) -> ApplicationResponse? {
    return ApplicationResponse(defaultId: 1, clusterIds: [Int]())

  }

  init(defaultId: Int, clusterIds: [Int]) {
    self.defaultId = defaultId
    self.clusterIds = clusterIds
  }
}

class ClusterResponse {
  let id: Int
  let vehicles: [Vehicle]
  let commodities: [Commodity]

  class func parse(message: NSDictionary) -> ClusterResponse? {
    return ClusterResponse(id: 4, vehicles: [Vehicle](), commodities: [Commodity]())
  }

  init(id: Int, vehicles: [Vehicle], commodities: [Commodity]) {
    self.id = id
    self.vehicles = vehicles
    self.commodities = commodities
  }
}